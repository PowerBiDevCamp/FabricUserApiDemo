{
  "type": "Report",
  "displayName": "Product Sales (Imported)",
  "definition": {
    "parts": [
      {
        "path": "definition.pbir",
        "payload": "ewogICJ2ZXJzaW9uIjogIjEuMCIsCiAgImRhdGFzZXRSZWZlcmVuY2UiOiB7CiAgICAiYnlQYXRoIjogbnVsbCwKICAgICJieUNvbm5lY3Rpb24iOiB7CiAgICAgICJjb25uZWN0aW9uU3RyaW5nIjogbnVsbCwKICAgICAgInBiaVNlcnZpY2VNb2RlbElkIjogbnVsbCwKICAgICAgInBiaU1vZGVsVmlydHVhbFNlcnZlck5hbWUiOiAic29iZV93b3d2aXJ0dWFsc2VydmVyIiwKICAgICAgInBiaU1vZGVsRGF0YWJhc2VOYW1lIjogIjNmYzE5ZGYzLTZmYjUtNDY5ZS05NmI1LWVmMDRiMzhmNmFhMSIsCiAgICAgICJuYW1lIjogIkVudGl0eURhdGFTb3VyY2UiLAogICAgICAiY29ubmVjdGlvblR5cGUiOiAicGJpU2VydmljZVhtbGFTdHlsZUxpdmUiCiAgICB9CiAgfQp9",
        "payloadType": "InlineBase64"
      },
      {
        "path": "report.json",
        "payload": "{
  "config": "{\"version\":\"5.47\",\"themeCollection\":{\"baseTheme\":{\"name\":\"CY23SU08\",\"version\":\"5.48\",\"type\":2}},\"activeSectionIndex\":0,\"bookmarks\":[{\"displayName\":\"GoToSalesSummaryPage\",\"name\":\"Bookmark12c9fe861747d85763a6\",\"explorationState\":{\"version\":\"1.3\",\"activeSection\":\"ReportSection\",\"sections\":{\"ReportSection\":{\"visualContainers\":{\"77df46c21535b48f2e73\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Year\"}},\"howCreated\":0},{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"columnChart\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}}}],\"activeProjections\":{\"Category\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}}]}}},\"3729776c38504a4d8b34\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0},{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Units Sold\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}},\"howCreated\":0},{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Customer Count\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"tableEx\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}}}]}},\"483ec6389163810826f4\":{\"singleVisual\":{\"visualType\":\"shape\",\"objects\":{}}},\"f0caaad6576d15b6cfbb\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"e29d3e96467e58db8bb3\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"06c429e70f7552ebc1c4\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"058a028473caabc0f8bf\":{\"singleVisual\":{\"visualType\":\"shape\",\"objects\":{}}},\"97321be5190112ac4673\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"card\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}}}]}},\"a1e8f2e3d8704be63070\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Units Sold\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"card\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Units Sold\"}}}]}},\"506722c38aa71daf7a0e\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Customer Count\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"card\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Customer Count\"}}}]}},\"1006200bf40de80cf2c1\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"First Sale\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"card\",\"objects\":{},\"orderBy\":[{\"Direction\":1,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"First Sale\"}}}]}},\"6e9e615c66d209e39810\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Last Sale\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"card\",\"objects\":{},\"orderBy\":[{\"Direction\":1,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Last Sale\"}}}]}},\"9805b4747b77e515f6d7\":{\"singleVisual\":{\"visualType\":\"shape\",\"objects\":{}}}}}},\"objects\":{\"merge\":{\"outspacePane\":[{\"properties\":{\"expanded\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]}}},\"options\":{\"targetVisualNames\":[],\"suppressDisplay\":true,\"suppressData\":true}},{\"displayName\":\"GoToSalesByCategoryPage\",\"name\":\"Bookmarkdc0bd49f9136b9d3ab54\",\"explorationState\":{\"version\":\"1.3\",\"activeSection\":\"ReportSection3218b98f7e1a408ebb08\",\"sections\":{\"ReportSection3218b98f7e1a408ebb08\":{\"visualContainers\":{\"d38cfbd9ed48ae3af263\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Category\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"barChart\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}}}],\"activeProjections\":{\"Category\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}}]}}},\"73454986861c481d950c\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0},{\"type\":\"Advanced\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Year\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Category\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"pivotTable\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}}}],\"activeProjections\":{\"Rows\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Category\"}},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}}],\"Columns\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Year\"}}]},\"expansionStates\":[{\"roles\":[\"Rows\"],\"levels\":[{\"queryRefs\":[\"Products.Category\"],\"isPinned\":true},{\"queryRefs\":[\"Products.Product\"],\"isCollapsed\":true,\"isPinned\":true}],\"root\":{\"identityValues\":null}}]}},\"cce2793afed1d6cd2dba\":{\"filters\":{\"byExpr\":[{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Category\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"slicer\",\"objects\":{\"merge\":{\"data\":[{\"properties\":{\"mode\":{\"expr\":{\"Literal\":{\"Value\":\"'Basic'\"}}}}}]}},\"activeProjections\":{\"Values\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Category\"}}]}}},\"a67318f9bd35dc887e95\":{\"singleVisual\":{\"visualType\":\"shape\",\"objects\":{}}},\"d9fda77622c83d2cd7aa\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"3850f6701be2b9e281e6\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"eddf333d7b728dccfb0a\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"3307e0ab0a0bb78fc410\":{\"singleVisual\":{\"visualType\":\"shape\",\"objects\":{}}}}}},\"objects\":{\"merge\":{\"outspacePane\":[{\"properties\":{\"expanded\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]}}},\"options\":{\"targetVisualNames\":[],\"suppressData\":true,\"suppressDisplay\":true}},{\"displayName\":\"GoToSalesOverTimePage\",\"name\":\"Bookmark1e85981afc3571597e7a\",\"explorationState\":{\"version\":\"1.3\",\"activeSection\":\"ReportSectionced0a3b9a1ad955bcac6\",\"sections\":{\"ReportSectionced0a3b9a1ad955bcac6\":{\"visualContainers\":{\"5e21fffa4928600d5048\":{\"filters\":{\"byExpr\":[{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Quarter\"}},\"howCreated\":0},{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Category\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"stackedAreaChart\",\"objects\":{},\"orderBy\":[{\"Direction\":1,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}}}],\"activeProjections\":{\"Category\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Quarter\"}}]}}},\"2426ee1b52e1c50f75f9\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0},{\"type\":\"Advanced\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Year\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"DayOfWeek\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"clusteredColumnChart\",\"objects\":{},\"orderBy\":[{\"Direction\":1,\"Expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Year\"}}}],\"activeProjections\":{\"Category\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"DayOfWeek\"}}]}}},\"7cc0b419521ff7eb5ad4\":{\"filters\":{\"byExpr\":[{\"type\":\"Advanced\",\"expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}},\"howCreated\":0},{\"type\":\"Categorical\",\"expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Quarter\"}},\"howCreated\":0}]},\"singleVisual\":{\"visualType\":\"pivotTable\",\"objects\":{},\"orderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Sales\"}},\"Property\":\"Sales Revenue\"}}}],\"activeProjections\":{\"Rows\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Products\"}},\"Property\":\"Product\"}}],\"Columns\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Entity\":\"Calendar\"}},\"Property\":\"Quarter\"}}]}}},\"35fd3f12d815296aef14\":{\"singleVisual\":{\"visualType\":\"shape\",\"objects\":{}}},\"98d62e739136b51fba82\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"ac0ba23874e4d98b36fb\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"a03fbfbb4f49308d483c\":{\"singleVisual\":{\"visualType\":\"actionButton\",\"objects\":{}}},\"95d5a5377eff0432212a\":{\"singleVisual\":{\"visualType\":\"shape\",\"objects\":{}}}}}},\"objects\":{\"merge\":{\"outspacePane\":[{\"properties\":{\"expanded\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]}}},\"options\":{\"targetVisualNames\":[],\"suppressData\":true,\"suppressDisplay\":true}}],\"defaultDrillFilterOtherVisuals\":true,\"settings\":{\"useNewFilterPaneExperience\":true,\"allowChangeFilterTypes\":true,\"useStylableVisualContainerHeader\":true,\"queryLimitOption\":6,\"useEnhancedTooltips\":true,\"exportDataMode\":1,\"useDefaultAggregateDisplayName\":true},\"objects\":{\"section\":[{\"properties\":{\"verticalAlignment\":{\"expr\":{\"Literal\":{\"Value\":\"'Top'\"}}}}}],\"outspacePane\":[{\"properties\":{\"expanded\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]}}",
  "layoutOptimization": 0,
  "resourcePackages": [
    {
      "resourcePackage": {
        "disabled": false,
        "items": [
          {
            "name": "CY23SU08",
            "path": "BaseThemes/CY23SU08.json",
            "type": 202
          }
        ],
        "name": "SharedResources",
        "type": 2
      }
    }
  ],
  "sections": [
    {
      "config": "{}",
      "displayName": "Sales Summary",
      "displayOption": 1,
      "filters": "[]",
      "height": 720.00,
      "name": "ReportSection",
      "visualContainers": [
        {
          "config": "{\"name\":\"058a028473caabc0f8bf\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":40.33955857385399,\"z\":0,\"width\":1280,\"height\":44,\"tabOrder\":12}}],\"singleVisual\":{\"visualType\":\"shape\",\"drillFilterOtherVisuals\":true,\"objects\":{\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'rectangle'\"}}}}}],\"rotation\":[{\"properties\":{\"shapeAngle\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}}}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"''\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"24D\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":0,\"Percent\":-0.3}}}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'ToolbarBackground'\"}}}}}]}},\"parentGroupName\":\"186ae9f2d7dee7f841c0\"}",
          "filters": "[]",
          "height": 44.00,
          "width": 1280.00,
          "x": 0.00,
          "y": 40.34,
          "z": 0.00
        },
        {
          "config": "{\"name\":\"06c429e70f7552ebc1c4\",\"layouts\":[{\"id\":0,\"position\":{\"x\":856,\"y\":48,\"z\":1000,\"width\":415.88978185993113,\"height\":36,\"tabOrder\":9}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales Over Time'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":2,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToSalesOverTime'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark1e85981afc3571597e7a'\"}}}}}]}},\"parentGroupName\":\"186ae9f2d7dee7f841c0\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 415.89,
          "x": 856.00,
          "y": 48.00,
          "z": 1000.00
        },
        {
          "config": "{\"name\":\"1006200bf40de80cf2c1\",\"layouts\":[{\"id\":0,\"position\":{\"x\":775.2674672446807,\"y\":12.60930295966142,\"z\":2000,\"width\":239.59252971137522,\"height\":76,\"tabOrder\":11}}],\"singleVisual\":{\"visualType\":\"card\",\"projections\":{\"Values\":[{\"queryRef\":\"Sales.First Sales Date\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"First Sale\"},\"Name\":\"Sales.First Sales Date\"}],\"OrderBy\":[{\"Direction\":1,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"First Sale\"}}}]},\"drillFilterOtherVisuals\":true,\"hasDefaultSort\":true,\"objects\":{\"labels\":[{\"properties\":{\"labelPrecision\":{\"expr\":{\"Literal\":{\"Value\":\"2L\"}}},\"labelDisplayUnits\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'CardFirstSalesDate'\"}}}}}]}},\"parentGroupName\":\"d9d211abde62ee79a1aa\"}",
          "filters": "[]",
          "height": 76.00,
          "width": 239.59,
          "x": 775.27,
          "y": 12.61,
          "z": 2000.00
        },
        {
          "config": "{\"name\":\"186ae9f2d7dee7f841c0\",\"layouts\":[{\"id\":0,\"position\":{\"height\":84.33955857385399,\"width\":1280,\"x\":0,\"y\":0,\"z\":3,\"tabOrder\":0}}],\"singleVisualGroup\":{\"displayName\":\"groupPageHeader\",\"groupMode\":0}}",
          "height": 84.34,
          "width": 1280.00,
          "x": 0.00,
          "y": 0.00,
          "z": 3.00
        },
        {
          "config": "{\"name\":\"3729776c38504a4d8b34\",\"layouts\":[{\"id\":0,\"position\":{\"x\":640,\"y\":84.08759124087591,\"z\":2,\"width\":640,\"height\":532.5547445255474,\"tabOrder\":6}}],\"singleVisual\":{\"visualType\":\"tableEx\",\"projections\":{\"Values\":[{\"queryRef\":\"Products.Product\"},{\"queryRef\":\"Sales.Sales Revenue\"},{\"queryRef\":\"Sales.Units Sold\"},{\"queryRef\":\"Sales.Customer Count\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"p\",\"Entity\":\"Products\",\"Type\":0},{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"},{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Units Sold\"},\"Name\":\"Sales.Units Sold\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Product\"},\"Name\":\"Products.Product\"},{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Customer Count\"},\"Name\":\"Sales.Customer Count\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"}}}]},\"drillFilterOtherVisuals\":true,\"objects\":{\"grid\":[{\"properties\":{\"imageHeight\":{\"expr\":{\"Literal\":{\"Value\":\"32D\"}}}}}],\"values\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"16D\"}}}}}],\"columnHeaders\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"16D\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"stylePreset\":[{\"properties\":{\"name\":{\"expr\":{\"Literal\":{\"Value\":\"'Condensed'\"}}}}}],\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Products Table'\"}}}}}]}}}",
          "filters": "[]",
          "height": 532.55,
          "width": 640.00,
          "x": 640.00,
          "y": 84.09,
          "z": 2.00
        },
        {
          "config": "{\"name\":\"483ec6389163810826f4\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":0,\"z\":4000,\"width\":1280,\"height\":40,\"tabOrder\":1}}],\"singleVisual\":{\"visualType\":\"shape\",\"drillFilterOtherVisuals\":true,\"objects\":{\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'rectangle'\"}}}}}],\"rotation\":[{\"properties\":{\"shapeAngle\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}}}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Product Sales Report'\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'ReportTitle'\"}}}}}]}},\"parentGroupName\":\"186ae9f2d7dee7f841c0\"}",
          "filters": "[]",
          "height": 40.00,
          "width": 1280.00,
          "x": 0.00,
          "y": 0.00,
          "z": 4000.00
        },
        {
          "config": "{\"name\":\"506722c38aa71daf7a0e\",\"layouts\":[{\"id\":0,\"position\":{\"x\":520.0891989934073,\"y\":12.60930295966142,\"z\":3000,\"width\":239.59252971137522,\"height\":76,\"tabOrder\":8}}],\"singleVisual\":{\"visualType\":\"card\",\"projections\":{\"Values\":[{\"queryRef\":\"Sales.Customer Count\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Customer Count\"},\"Name\":\"Sales.Customer Count\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Customer Count\"}}}]},\"drillFilterOtherVisuals\":true,\"hasDefaultSort\":true,\"objects\":{\"labels\":[{\"properties\":{\"labelPrecision\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}},\"labelDisplayUnits\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'CardCustomerCount'\"}}}}}]}},\"parentGroupName\":\"d9d211abde62ee79a1aa\"}",
          "filters": "[]",
          "height": 76.00,
          "width": 239.59,
          "x": 520.09,
          "y": 12.61,
          "z": 3000.00
        },
        {
          "config": "{\"name\":\"6e9e615c66d209e39810\",\"layouts\":[{\"id\":0,\"position\":{\"x\":1030.4457354959538,\"y\":12.60930295966142,\"z\":1000,\"width\":239.59252971137522,\"height\":76,\"tabOrder\":13}}],\"singleVisual\":{\"visualType\":\"card\",\"projections\":{\"Values\":[{\"queryRef\":\"Sales.Last Sale Date\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Last Sale\"},\"Name\":\"Sales.Last Sale Date\"}],\"OrderBy\":[{\"Direction\":1,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Last Sale\"}}}]},\"drillFilterOtherVisuals\":true,\"hasDefaultSort\":true,\"objects\":{\"labels\":[{\"properties\":{\"labelPrecision\":{\"expr\":{\"Literal\":{\"Value\":\"2L\"}}},\"labelDisplayUnits\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'CardLastSalesDate'\"}}}}}]}},\"parentGroupName\":\"d9d211abde62ee79a1aa\"}",
          "filters": "[]",
          "height": 76.00,
          "width": 239.59,
          "x": 1030.45,
          "y": 12.61,
          "z": 1000.00
        },
        {
          "config": "{\"name\":\"77df46c21535b48f2e73\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":84.08759124087591,\"z\":1,\"width\":640,\"height\":532.5547445255474,\"tabOrder\":3}}],\"singleVisual\":{\"visualType\":\"columnChart\",\"projections\":{\"Category\":[{\"queryRef\":\"Products.Product\",\"active\":true}],\"Series\":[{\"queryRef\":\"Calendar.Year\"}],\"Y\":[{\"queryRef\":\"Sales.Sales Revenue\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0},{\"Name\":\"c\",\"Entity\":\"Calendar\",\"Type\":0},{\"Name\":\"p\",\"Entity\":\"Products\",\"Type\":0}],\"Select\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"c\"}},\"Property\":\"Year\"},\"Name\":\"Calendar.Year\"},{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Product\"},\"Name\":\"Products.Product\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"}}}]},\"drillFilterOtherVisuals\":true,\"hasDefaultSort\":true,\"objects\":{\"legend\":[{\"properties\":{\"position\":{\"expr\":{\"Literal\":{\"Value\":\"'Right'\"}}}}}],\"valueAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}],\"categoryAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}]}}}",
          "filters": "[]",
          "height": 532.55,
          "width": 640.00,
          "x": 0.00,
          "y": 84.09,
          "z": 1.00
        },
        {
          "config": "{\"name\":\"97321be5190112ac4673\",\"layouts\":[{\"id\":0,\"position\":{\"x\":9.732662490860424,\"y\":12.60930295966142,\"z\":5000,\"width\":239.59252971137522,\"height\":76,\"tabOrder\":2}}],\"singleVisual\":{\"visualType\":\"card\",\"projections\":{\"Values\":[{\"queryRef\":\"Sales.Sales Revenue\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"}}}]},\"drillFilterOtherVisuals\":true,\"hasDefaultSort\":true,\"objects\":{\"labels\":[{\"properties\":{\"labelPrecision\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}},\"labelDisplayUnits\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}},\"color\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":3,\"Percent\":-0.5}}}}}}}],\"categoryLabels\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'CardSalesRevenue'\"}}}}}]}},\"parentGroupName\":\"d9d211abde62ee79a1aa\"}",
          "filters": "[]",
          "height": 76.00,
          "width": 239.59,
          "x": 9.73,
          "y": 12.61,
          "z": 5000.00
        },
        {
          "config": "{\"name\":\"9805b4747b77e515f6d7\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":0,\"z\":0,\"width\":1280,\"height\":102.77372262773723,\"tabOrder\":14}}],\"singleVisual\":{\"visualType\":\"shape\",\"drillFilterOtherVisuals\":true,\"objects\":{\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'rectangle'\"}}}}}],\"rotation\":[{\"properties\":{\"shapeAngle\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}}}}],\"fill\":[{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'CardBackground'\"}}}}}]}},\"parentGroupName\":\"d9d211abde62ee79a1aa\"}",
          "filters": "[]",
          "height": 102.77,
          "width": 1280.00,
          "x": 0.00,
          "y": 0.00,
          "z": 0.00
        },
        {
          "config": "{\"name\":\"a1e8f2e3d8704be63070\",\"layouts\":[{\"id\":0,\"position\":{\"x\":264.9109307421338,\"y\":12.60930295966142,\"z\":4000,\"width\":239.59252971137522,\"height\":76,\"tabOrder\":5}}],\"singleVisual\":{\"visualType\":\"card\",\"projections\":{\"Values\":[{\"queryRef\":\"Sales.Units Sold\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Units Sold\"},\"Name\":\"Sales.Units Sold\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Units Sold\"}}}]},\"drillFilterOtherVisuals\":true,\"hasDefaultSort\":true,\"objects\":{\"labels\":[{\"properties\":{\"labelPrecision\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}},\"labelDisplayUnits\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}}}],\"categoryLabels\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'CardUnitsSold'\"}}}}}]}},\"parentGroupName\":\"d9d211abde62ee79a1aa\"}",
          "filters": "[]",
          "height": 76.00,
          "width": 239.59,
          "x": 264.91,
          "y": 12.61,
          "z": 4000.00
        },
        {
          "config": "{\"name\":\"d9d211abde62ee79a1aa\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":616.6423357664233,\"z\":0,\"width\":1280,\"height\":102.77372262773723,\"tabOrder\":3000}}],\"singleVisualGroup\":{\"displayName\":\"groupCardPanel\",\"groupMode\":0}}",
          "height": 102.77,
          "width": 1280.00,
          "x": 0.00,
          "y": 616.64,
          "z": 0.00
        },
        {
          "config": "{\"name\":\"e29d3e96467e58db8bb3\",\"layouts\":[{\"id\":0,\"position\":{\"x\":432,\"y\":48,\"z\":2000,\"width\":415.88978185993113,\"height\":36,\"tabOrder\":7}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales By Category'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":2,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToSalesByCategory'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmarkdc0bd49f9136b9d3ab54'\"}}}}}]}},\"parentGroupName\":\"186ae9f2d7dee7f841c0\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 415.89,
          "x": 432.00,
          "y": 48.00,
          "z": 2000.00
        },
        {
          "config": "{\"name\":\"f0caaad6576d15b6cfbb\",\"layouts\":[{\"id\":0,\"position\":{\"x\":8,\"y\":48,\"z\":3000,\"width\":416,\"height\":36,\"tabOrder\":4}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales Summary'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":8,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}},\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToTopSellingProducts'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark6f5e36cc8e2f3a092c1a'\"}}}}}]}},\"parentGroupName\":\"186ae9f2d7dee7f841c0\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 416.00,
          "x": 8.00,
          "y": 48.00,
          "z": 3000.00
        }
      ],
      "width": 1280.00
    },
    {
      "config": "{\"visibility\":1}",
      "displayName": "Sales By Category",
      "displayOption": 1,
      "filters": "[]",
      "height": 720.00,
      "name": "ReportSection3218b98f7e1a408ebb08",
      "ordinal": 1,
      "visualContainers": [
        {
          "config": "{\"name\":\"3307e0ab0a0bb78fc410\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":40.33955857385399,\"z\":0,\"width\":1280,\"height\":44,\"tabOrder\":8}}],\"singleVisual\":{\"visualType\":\"shape\",\"drillFilterOtherVisuals\":true,\"objects\":{\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'rectangle'\"}}}}}],\"rotation\":[{\"properties\":{\"shapeAngle\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}}}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"''\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"24D\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":0,\"Percent\":-0.3}}}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'ToolbarBackground'\"}}}}}]}},\"parentGroupName\":\"d9ab81593e9fd88c747a\"}",
          "filters": "[]",
          "height": 44.00,
          "width": 1280.00,
          "x": 0.00,
          "y": 40.34,
          "z": 0.00
        },
        {
          "config": "{\"name\":\"3850f6701be2b9e281e6\",\"layouts\":[{\"id\":0,\"position\":{\"x\":432,\"y\":48,\"z\":2000,\"width\":415.88978185993113,\"height\":36,\"tabOrder\":5}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales By Category'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":8,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToSalesByCategory'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark983938c06f35d7bfb048'\"}}}}}]}},\"parentGroupName\":\"d9ab81593e9fd88c747a\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 415.89,
          "x": 432.00,
          "y": 48.00,
          "z": 2000.00
        },
        {
          "config": "{\"name\":\"73454986861c481d950c\",\"layouts\":[{\"id\":0,\"position\":{\"x\":640.9682299546142,\"y\":85.20423600605145,\"z\":1,\"width\":639.0317700453859,\"height\":579.0015128593042,\"tabOrder\":4}}],\"singleVisual\":{\"visualType\":\"pivotTable\",\"projections\":{\"Rows\":[{\"queryRef\":\"Products.Category\",\"active\":true},{\"queryRef\":\"Products.Product\",\"active\":true}],\"Columns\":[{\"queryRef\":\"Calendar.Year\",\"active\":true}],\"Values\":[{\"queryRef\":\"Sales.Sales Revenue\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0},{\"Name\":\"p\",\"Entity\":\"Products\",\"Type\":0},{\"Name\":\"c\",\"Entity\":\"Calendar\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"c\"}},\"Property\":\"Year\"},\"Name\":\"Calendar.Year\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Category\"},\"Name\":\"Products.Category\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Product\"},\"Name\":\"Products.Product\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"}}}]},\"expansionStates\":[{\"roles\":[\"Rows\"],\"levels\":[{\"queryRefs\":[\"Products.Category\"],\"isPinned\":true},{\"queryRefs\":[\"Products.Product\"],\"isCollapsed\":true,\"isPinned\":true}],\"root\":{\"identityValues\":null}}],\"drillFilterOtherVisuals\":true,\"objects\":{\"grid\":[{\"properties\":{\"imageHeight\":{\"expr\":{\"Literal\":{\"Value\":\"32D\"}}}}}],\"values\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}}}}],\"columnHeaders\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"stylePreset\":[{\"properties\":{\"name\":{\"expr\":{\"Literal\":{\"Value\":\"'Minimal'\"}}}}}]}}}",
          "filters": "[]",
          "height": 579.00,
          "width": 639.03,
          "x": 640.97,
          "y": 85.20,
          "z": 1.00
        },
        {
          "config": "{\"name\":\"a67318f9bd35dc887e95\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":0,\"z\":4000,\"width\":1280,\"height\":40,\"tabOrder\":1}}],\"singleVisual\":{\"visualType\":\"shape\",\"drillFilterOtherVisuals\":true,\"objects\":{\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'rectangle'\"}}}}}],\"rotation\":[{\"properties\":{\"shapeAngle\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}}}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Product Sales Report'\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'ReportTitle'\"}}}}}]}},\"parentGroupName\":\"d9ab81593e9fd88c747a\"}",
          "filters": "[]",
          "height": 40.00,
          "width": 1280.00,
          "x": 0.00,
          "y": 0.00,
          "z": 4000.00
        },
        {
          "config": "{\"name\":\"cce2793afed1d6cd2dba\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":664.9148418491484,\"z\":2,\"width\":1280,\"height\":54.50121654501216,\"tabOrder\":6}}],\"singleVisual\":{\"visualType\":\"slicer\",\"projections\":{\"Values\":[{\"queryRef\":\"Products.Category\",\"active\":true}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"p\",\"Entity\":\"Products\",\"Type\":0}],\"Select\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Category\"},\"Name\":\"Products.Category\"}]},\"drillFilterOtherVisuals\":true,\"objects\":{\"data\":[{\"properties\":{\"mode\":{\"expr\":{\"Literal\":{\"Value\":\"'Basic'\"}}}}}],\"general\":[{\"properties\":{\"orientation\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}}}],\"selection\":[{\"properties\":{\"selectAllCheckboxEnabled\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}],\"header\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}],\"items\":[{\"properties\":{\"background\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":8,\"Percent\":0.6}}}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"textSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"bold\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}]},\"vcObjects\":{\"background\":[{\"properties\":{\"color\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":0,\"Percent\":-0.1}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}}}]}}}",
          "filters": "[]",
          "height": 54.50,
          "width": 1280.00,
          "x": 0.00,
          "y": 664.91,
          "z": 2.00
        },
        {
          "config": "{\"name\":\"d38cfbd9ed48ae3af263\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":85.20423600605145,\"z\":0,\"width\":640.9682299546142,\"height\":579.0015128593042,\"tabOrder\":2}}],\"singleVisual\":{\"visualType\":\"barChart\",\"projections\":{\"Category\":[{\"queryRef\":\"Products.Product\",\"active\":true}],\"Series\":[{\"queryRef\":\"Products.Category\"}],\"Y\":[{\"queryRef\":\"Sales.Sales Revenue\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0},{\"Name\":\"p\",\"Entity\":\"Products\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Category\"},\"Name\":\"Products.Category\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Product\"},\"Name\":\"Products.Product\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"}}}]},\"drillFilterOtherVisuals\":true,\"hasDefaultSort\":true,\"objects\":{\"legend\":[{\"properties\":{\"position\":{\"expr\":{\"Literal\":{\"Value\":\"'Right'\"}}}}}],\"valueAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}],\"categoryAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}},\"concatenateLabels\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Top Selling Products'\"}}}}}]}}}",
          "filters": "[]",
          "height": 579.00,
          "width": 640.97,
          "x": 0.00,
          "y": 85.20,
          "z": 0.00
        },
        {
          "config": "{\"name\":\"d9ab81593e9fd88c747a\",\"layouts\":[{\"id\":0,\"position\":{\"height\":84.33955857385399,\"width\":1280,\"x\":0,\"y\":0,\"z\":3,\"tabOrder\":0}}],\"singleVisualGroup\":{\"displayName\":\"groupPageHeader\",\"groupMode\":0}}",
          "height": 84.34,
          "width": 1280.00,
          "x": 0.00,
          "y": 0.00,
          "z": 3.00
        },
        {
          "config": "{\"name\":\"d9fda77622c83d2cd7aa\",\"layouts\":[{\"id\":0,\"position\":{\"x\":8,\"y\":48,\"z\":3000,\"width\":416,\"height\":36,\"tabOrder\":3}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales Summary'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":2,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}},\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToTopSellingProducts'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark12c9fe861747d85763a6'\"}}}}}]}},\"parentGroupName\":\"d9ab81593e9fd88c747a\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 416.00,
          "x": 8.00,
          "y": 48.00,
          "z": 3000.00
        },
        {
          "config": "{\"name\":\"eddf333d7b728dccfb0a\",\"layouts\":[{\"id\":0,\"position\":{\"x\":856,\"y\":48,\"z\":1000,\"width\":415.88978185993113,\"height\":36,\"tabOrder\":7}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales Over Time'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":2,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToSalesOverTime'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark1e85981afc3571597e7a'\"}}}}}]}},\"parentGroupName\":\"d9ab81593e9fd88c747a\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 415.89,
          "x": 856.00,
          "y": 48.00,
          "z": 1000.00
        }
      ],
      "width": 1280.00
    },
    {
      "config": "{\"objects\":{\"outspacePane\":[{\"properties\":{\"width\":{\"expr\":{\"Literal\":{\"Value\":\"201L\"}}}}}]},\"visibility\":1}",
      "displayName": "Sales Over Time",
      "displayOption": 1,
      "filters": "[]",
      "height": 720.00,
      "name": "ReportSectionced0a3b9a1ad955bcac6",
      "ordinal": 2,
      "visualContainers": [
        {
          "config": "{\"name\":\"2426ee1b52e1c50f75f9\",\"layouts\":[{\"id\":0,\"position\":{\"x\":683.57034795764,\"y\":85.20423600605145,\"z\":1,\"width\":596.4296520423601,\"height\":300.1512859304085,\"tabOrder\":4}}],\"singleVisual\":{\"visualType\":\"clusteredColumnChart\",\"projections\":{\"Category\":[{\"queryRef\":\"Calendar.DayOfWeek\",\"active\":true}],\"Y\":[{\"queryRef\":\"Sales.Sales Revenue\"}],\"Series\":[{\"queryRef\":\"Calendar.Year\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0},{\"Name\":\"c\",\"Entity\":\"Calendar\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"c\"}},\"Property\":\"Year\"},\"Name\":\"Calendar.Year\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"c\"}},\"Property\":\"DayOfWeek\"},\"Name\":\"Calendar.DayOfWeek\",\"NativeReferenceName\":\"DayOfWeek\"}],\"OrderBy\":[{\"Direction\":1,\"Expression\":{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"c\"}},\"Property\":\"Year\"}}}]},\"drillFilterOtherVisuals\":true,\"objects\":{\"legend\":[{\"properties\":{\"position\":{\"expr\":{\"Literal\":{\"Value\":\"'Right'\"}}}}}],\"categoryAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}],\"valueAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}]}}}",
          "filters": "[]",
          "height": 300.15,
          "width": 596.43,
          "x": 683.57,
          "y": 85.20,
          "z": 1.00
        },
        {
          "config": "{\"name\":\"35fd3f12d815296aef14\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":0,\"z\":4000,\"width\":1280,\"height\":40,\"tabOrder\":1}}],\"singleVisual\":{\"visualType\":\"shape\",\"drillFilterOtherVisuals\":true,\"objects\":{\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'rectangle'\"}}}}}],\"rotation\":[{\"properties\":{\"shapeAngle\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}}}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Product Sales Report'\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"18D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'ReportTitle'\"}}}}}]}},\"parentGroupName\":\"6f3d1da26b2b1052b594\"}",
          "filters": "[]",
          "height": 40.00,
          "width": 1280.00,
          "x": 0.00,
          "y": 0.00,
          "z": 4000.00
        },
        {
          "config": "{\"name\":\"5e21fffa4928600d5048\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":85.20423600605145,\"z\":0,\"width\":685.5068078668685,\"height\":300.1512859304085,\"tabOrder\":0}}],\"singleVisual\":{\"visualType\":\"stackedAreaChart\",\"projections\":{\"Category\":[{\"queryRef\":\"Calendar.Quarter\",\"active\":true}],\"Y\":[{\"queryRef\":\"Sales.Sales Revenue\"}],\"Series\":[{\"queryRef\":\"Products.Category\"}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0},{\"Name\":\"c\",\"Entity\":\"Calendar\",\"Type\":0},{\"Name\":\"p\",\"Entity\":\"Products\",\"Type\":0}],\"Select\":[{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"c\"}},\"Property\":\"Quarter\"},\"Name\":\"Calendar.Quarter\",\"NativeReferenceName\":\"Quarter\"},{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Category\"},\"Name\":\"Products.Category\",\"NativeReferenceName\":\"Category\"}],\"OrderBy\":[{\"Direction\":1,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"}}}]},\"drillFilterOtherVisuals\":true,\"objects\":{\"legend\":[{\"properties\":{\"position\":{\"expr\":{\"Literal\":{\"Value\":\"'Top'\"}}}}}],\"valueAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}],\"categoryAxis\":[{\"properties\":{\"showAxisTitle\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"title\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"false\"}}}}}]}}}",
          "filters": "[]",
          "height": 300.15,
          "width": 685.51,
          "x": 0.00,
          "y": 85.20,
          "z": 0.00
        },
        {
          "config": "{\"name\":\"6f3d1da26b2b1052b594\",\"layouts\":[{\"id\":0,\"position\":{\"height\":84.33955857385399,\"width\":1280,\"x\":0,\"y\":0,\"z\":3,\"tabOrder\":1000}}],\"singleVisualGroup\":{\"displayName\":\"groupPageHeader\",\"groupMode\":0}}",
          "height": 84.34,
          "width": 1280.00,
          "x": 0.00,
          "y": 0.00,
          "z": 3.00
        },
        {
          "config": "{\"name\":\"7cc0b419521ff7eb5ad4\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":386.9317727959435,\"z\":2,\"width\":1271.7536944101969,\"height\":331.45258478476046,\"tabOrder\":6}}],\"singleVisual\":{\"visualType\":\"pivotTable\",\"projections\":{\"Rows\":[{\"queryRef\":\"Products.Product\",\"active\":true}],\"Values\":[{\"queryRef\":\"Sales.Sales Revenue\"}],\"Columns\":[{\"queryRef\":\"Calendar.Quarter\",\"active\":true}]},\"prototypeQuery\":{\"Version\":2,\"From\":[{\"Name\":\"s\",\"Entity\":\"Sales\",\"Type\":0},{\"Name\":\"p\",\"Entity\":\"Products\",\"Type\":0},{\"Name\":\"c\",\"Entity\":\"Calendar\",\"Type\":0}],\"Select\":[{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"},\"Name\":\"Sales.Sales Revenue\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"p\"}},\"Property\":\"Product\"},\"Name\":\"Products.Product\"},{\"Column\":{\"Expression\":{\"SourceRef\":{\"Source\":\"c\"}},\"Property\":\"Quarter\"},\"Name\":\"Calendar.Quarter\",\"NativeReferenceName\":\"Quarter\"}],\"OrderBy\":[{\"Direction\":2,\"Expression\":{\"Measure\":{\"Expression\":{\"SourceRef\":{\"Source\":\"s\"}},\"Property\":\"Sales Revenue\"}}}]},\"drillFilterOtherVisuals\":true,\"objects\":{\"values\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"9D\"}}}}}],\"rowHeaders\":[{\"properties\":{\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"9D\"}}}}}],\"subTotals\":[{\"properties\":{\"rowSubtotals\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}]},\"vcObjects\":{\"border\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}}],\"stylePreset\":[{\"properties\":{\"name\":{\"expr\":{\"Literal\":{\"Value\":\"'Minimal'\"}}}}}]}}}",
          "filters": "[]",
          "height": 331.45,
          "width": 1271.75,
          "x": 0.00,
          "y": 386.93,
          "z": 2.00
        },
        {
          "config": "{\"name\":\"95d5a5377eff0432212a\",\"layouts\":[{\"id\":0,\"position\":{\"x\":0,\"y\":40.33955857385399,\"z\":0,\"width\":1280,\"height\":44,\"tabOrder\":8}}],\"singleVisual\":{\"visualType\":\"shape\",\"drillFilterOtherVisuals\":true,\"objects\":{\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'rectangle'\"}}}}}],\"rotation\":[{\"properties\":{\"shapeAngle\":{\"expr\":{\"Literal\":{\"Value\":\"0L\"}}}}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"''\"}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"24D\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":0,\"Percent\":-0.3}}}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'ToolbarBackground'\"}}}}}]}},\"parentGroupName\":\"6f3d1da26b2b1052b594\"}",
          "filters": "[]",
          "height": 44.00,
          "width": 1280.00,
          "x": 0.00,
          "y": 40.34,
          "z": 0.00
        },
        {
          "config": "{\"name\":\"98d62e739136b51fba82\",\"layouts\":[{\"id\":0,\"position\":{\"x\":8,\"y\":48,\"z\":3000,\"width\":416,\"height\":36,\"tabOrder\":3}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales Summary'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":2,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}},\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToTopSellingProducts'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark12c9fe861747d85763a6'\"}}}}}]}},\"parentGroupName\":\"6f3d1da26b2b1052b594\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 416.00,
          "x": 8.00,
          "y": 48.00,
          "z": 3000.00
        },
        {
          "config": "{\"name\":\"a03fbfbb4f49308d483c\",\"layouts\":[{\"id\":0,\"position\":{\"x\":856,\"y\":48,\"z\":1000,\"width\":415.88978185993113,\"height\":36,\"tabOrder\":7}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales Over Time'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":8,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToSalesOverTime'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmarka3d919f99aefb86c5efa'\"}}}}}]}},\"parentGroupName\":\"6f3d1da26b2b1052b594\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 415.89,
          "x": 856.00,
          "y": 48.00,
          "z": 1000.00
        },
        {
          "config": "{\"name\":\"ac0ba23874e4d98b36fb\",\"layouts\":[{\"id\":0,\"position\":{\"x\":432,\"y\":48,\"z\":2000,\"width\":415.88978185993113,\"height\":36,\"tabOrder\":5}}],\"singleVisual\":{\"visualType\":\"actionButton\",\"drillFilterOtherVisuals\":true,\"objects\":{\"icon\":[{\"properties\":{\"shapeType\":{\"expr\":{\"Literal\":{\"Value\":\"'blank'\"}}}},\"selector\":{\"id\":\"default\"}}],\"text\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'Sales By Category'\"}}},\"fontColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"fontSize\":{\"expr\":{\"Literal\":{\"Value\":\"12D\"}}},\"fontFamily\":{\"expr\":{\"Literal\":{\"Value\":\"'''Segoe UI Bold'', wf_segoe-ui_bold, helvetica, arial, sans-serif'\"}}}},\"selector\":{\"id\":\"default\"}}],\"shape\":[{\"properties\":{\"tileShape\":{\"expr\":{\"Literal\":{\"Value\":\"'tabRoundTopCorners'\"}}}},\"selector\":{\"id\":\"default\"}}],\"fill\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}}}},{\"properties\":{\"fillColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":2,\"Percent\":0.6}}}}},\"transparency\":{\"expr\":{\"Literal\":{\"Value\":\"0D\"}}}},\"selector\":{\"id\":\"default\"}}],\"outline\":[{\"properties\":{\"lineColor\":{\"solid\":{\"color\":{\"expr\":{\"ThemeDataColor\":{\"ColorId\":1,\"Percent\":0}}}}},\"weight\":{\"expr\":{\"Literal\":{\"Value\":\"1D\"}}}},\"selector\":{\"id\":\"default\"}}]},\"vcObjects\":{\"title\":[{\"properties\":{\"text\":{\"expr\":{\"Literal\":{\"Value\":\"'GoToSalesByCategory'\"}}}}}],\"visualLink\":[{\"properties\":{\"show\":{\"expr\":{\"Literal\":{\"Value\":\"true\"}}},\"type\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmark'\"}}},\"bookmark\":{\"expr\":{\"Literal\":{\"Value\":\"'Bookmarkdc0bd49f9136b9d3ab54'\"}}}}}]}},\"parentGroupName\":\"6f3d1da26b2b1052b594\"}",
          "filters": "[]",
          "height": 36.00,
          "width": 415.89,
          "x": 432.00,
          "y": 48.00,
          "z": 2000.00
        }
      ],
      "width": 1280.00
    }
  ]
}",
        "payloadType": "InlineBase64"
      },
      {
        "path": "StaticResources/SharedResources/BaseThemes/CY23SU08.json",
        "payload": "{
  "name": "CY23SU08",
  "dataColors": [
    "#118DFF",
    "#12239E",
    "#E66C37",
    "#6B007B",
    "#E044A7",
    "#744EC2",
    "#D9B300",
    "#D64550",
    "#197278",
    "#1AAB40",
    "#15C6F4",
    "#4092FF",
    "#FFA058",
    "#BE5DC9",
    "#F472D0",
    "#B5A1FF",
    "#C4A200",
    "#FF8080",
    "#00DBBC",
    "#5BD667",
    "#0091D5",
    "#4668C5",
    "#FF6300",
    "#99008A",
    "#EC008C",
    "#533285",
    "#99700A",
    "#FF4141",
    "#1F9A85",
    "#25891C",
    "#0057A2",
    "#002050",
    "#C94F0F",
    "#450F54",
    "#B60064",
    "#34124F",
    "#6A5A29",
    "#1AAB40",
    "#BA141A",
    "#0C3D37",
    "#0B511F"
  ],
  "foreground": "#252423",
  "foregroundNeutralSecondary": "#605E5C",
  "foregroundNeutralTertiary": "#B3B0AD",
  "background": "#FFFFFF",
  "backgroundLight": "#F3F2F1",
  "backgroundNeutral": "#C8C6C4",
  "tableAccent": "#118DFF",
  "good": "#1AAB40",
  "neutral": "#D9B300",
  "bad": "#D64554",
  "maximum": "#118DFF",
  "center": "#D9B300",
  "minimum": "#DEEFFF",
  "null": "#FF7F48",
  "hyperlink": "#0078d4",
  "visitedHyperlink": "#0078d4",
  "textClasses": {
    "callout": {
      "fontSize": 45,
      "fontFace": "DIN",
      "color": "#252423"
    },
    "title": {
      "fontSize": 12,
      "fontFace": "DIN",
      "color": "#252423"
    },
    "header": {
      "fontSize": 12,
      "fontFace": "Segoe UI Semibold",
      "color": "#252423"
    },
    "label": {
      "fontSize": 10,
      "fontFace": "Segoe UI",
      "color": "#252423"
    }
  },
  "visualStyles": {
    "*": {
      "*": {
        "*": [
          {
            "wordWrap": true
          }
        ],
        "line": [
          {
            "transparency": 0
          }
        ],
        "outline": [
          {
            "transparency": 0
          }
        ],
        "plotArea": [
          {
            "transparency": 0
          }
        ],
        "categoryAxis": [
          {
            "showAxisTitle": true,
            "gridlineStyle": "dotted",
            "concatenateLabels": false
          }
        ],
        "valueAxis": [
          {
            "showAxisTitle": true,
            "gridlineStyle": "dotted"
          }
        ],
        "y2Axis": [
          {
            "show": true
          }
        ],
        "title": [
          {
            "titleWrap": true
          }
        ],
        "lineStyles": [
          {
            "strokeWidth": 3
          }
        ],
        "wordWrap": [
          {
            "show": true
          }
        ],
        "background": [
          {
            "show": true,
            "transparency": 0
          }
        ],
        "outspacePane": [
          {
            "backgroundColor": {
              "solid": {
                "color": "#ffffff"
              }
            },
            "transparency": 0,
            "border": true,
            "borderColor": {
              "solid": {
                "color": "#B3B0AD"
              }
            }
          }
        ],
        "filterCard": [
          {
            "$id": "Applied",
            "transparency": 0,
            "foregroundColor": {
              "solid": {
                "color": "#252423"
              }
            },
            "border": true
          },
          {
            "$id": "Available",
            "transparency": 0,
            "foregroundColor": {
              "solid": {
                "color": "#252423"
              }
            },
            "border": true
          }
        ]
      }
    },
    "scatterChart": {
      "*": {
        "bubbles": [
          {
            "bubbleSize": -10,
            "markerRangeType": "auto"
          }
        ],
        "general": [
          {
            "responsive": true
          }
        ],
        "fillPoint": [
          {
            "show": true
          }
        ],
        "legend": [
          {
            "showGradientLegend": true
          }
        ]
      }
    },
    "lineChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "map": {
      "*": {
        "bubbles": [
          {
            "bubbleSize": -10,
            "markerRangeType": "auto"
          }
        ]
      }
    },
    "azureMap": {
      "*": {
        "bubbleLayer": [
          {
            "bubbleRadius": 8,
            "minBubbleRadius": 8,
            "maxRadius": 40
          }
        ],
        "barChart": [
          {
            "barHeight": 3,
            "thickness": 3
          }
        ]
      }
    },
    "pieChart": {
      "*": {
        "legend": [
          {
            "show": true,
            "position": "RightCenter"
          }
        ],
        "labels": [
          {
            "labelStyle": "Data value, percent of total"
          }
        ]
      }
    },
    "donutChart": {
      "*": {
        "legend": [
          {
            "show": true,
            "position": "RightCenter"
          }
        ],
        "labels": [
          {
            "labelStyle": "Data value, percent of total"
          }
        ]
      }
    },
    "pivotTable": {
      "*": {
        "*": [
          {
            "showExpandCollapseButtons": true
          }
        ]
      }
    },
    "multiRowCard": {
      "*": {
        "card": [
          {
            "outlineWeight": 2,
            "barShow": true,
            "barWeight": 2
          }
        ]
      }
    },
    "kpi": {
      "*": {
        "trendline": [
          {
            "transparency": 20
          }
        ]
      }
    },
    "slicer": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "date": [
          {
            "hideDatePickerButton": false
          }
        ],
        "items": [
          {
            "padding": 4,
            "accessibilityContrastProperties": true
          }
        ]
      }
    },
    "waterfallChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ]
      }
    },
    "columnChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "legend": [
          {
            "showGradientLegend": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "clusteredColumnChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "legend": [
          {
            "showGradientLegend": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "hundredPercentStackedColumnChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "legend": [
          {
            "showGradientLegend": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "barChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "legend": [
          {
            "showGradientLegend": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "clusteredBarChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "legend": [
          {
            "showGradientLegend": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "hundredPercentStackedBarChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "legend": [
          {
            "showGradientLegend": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "areaChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "stackedAreaChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "lineClusteredColumnComboChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "lineStackedColumnComboChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ],
        "smallMultiplesLayout": [
          {
            "backgroundTransparency": 0,
            "gridLineType": "inner"
          }
        ]
      }
    },
    "ribbonChart": {
      "*": {
        "general": [
          {
            "responsive": true
          }
        ]
      }
    },
    "group": {
      "*": {
        "background": [
          {
            "show": false
          }
        ]
      }
    },
    "basicShape": {
      "*": {
        "background": [
          {
            "show": false
          }
        ],
        "general": [
          {
            "keepLayerOrder": true
          }
        ],
        "visualHeader": [
          {
            "show": false
          }
        ]
      }
    },
    "shape": {
      "*": {
        "background": [
          {
            "show": false
          }
        ],
        "general": [
          {
            "keepLayerOrder": true
          }
        ],
        "visualHeader": [
          {
            "show": false
          }
        ]
      }
    },
    "image": {
      "*": {
        "background": [
          {
            "show": false
          }
        ],
        "general": [
          {
            "keepLayerOrder": true
          }
        ],
        "visualHeader": [
          {
            "show": false
          }
        ],
        "lockAspect": [
          {
            "show": true
          }
        ]
      }
    },
    "actionButton": {
      "*": {
        "background": [
          {
            "show": false
          }
        ],
        "visualHeader": [
          {
            "show": false
          }
        ]
      }
    },
    "pageNavigator": {
      "*": {
        "background": [
          {
            "show": false
          }
        ],
        "visualHeader": [
          {
            "show": false
          }
        ]
      }
    },
    "bookmarkNavigator": {
      "*": {
        "background": [
          {
            "show": false
          }
        ],
        "visualHeader": [
          {
            "show": false
          }
        ]
      }
    },
    "textbox": {
      "*": {
        "general": [
          {
            "keepLayerOrder": true
          }
        ],
        "visualHeader": [
          {
            "show": false
          }
        ]
      }
    },
    "page": {
      "*": {
        "outspace": [
          {
            "color": {
              "solid": {
                "color": "#FFFFFF"
              }
            }
          }
        ],
        "background": [
          {
            "transparency": 100
          }
        ]
      }
    }
  }
}",
        "payloadType": "InlineBase64"
      }
    ]
  }
}


